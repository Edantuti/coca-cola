generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @unique @default(cuid())
  name      String
  photo     String
  staff     Boolean    @default(false)
  email     String     @unique
  session   Session[]
  Cart      Cart[]
  Orders    Orders[]
  Reviews   Reviews[]
  Wishlist  Wishlist[]
  createdAt DateTime   @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id          String        @unique @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime      @default(now())
  CartProduct CartProduct[]
}

model Product {
  id                 String               @unique @default(cuid())
  name               String
  image              String
  stock              Int
  price              Int
  category           String
  details            String[]
  description        String
  size               String
  ClothProduct       ClothProduct[]
  Reviews            Reviews[]
  createdAt          DateTime             @default(now())
  GroceryProduct     GroceryProduct[]
  AccessoriesProduct AccessoriesProduct[]
  ProductHistory     ProductHistory[]
  OrderProduct       OrderProduct[]
  CartProduct        CartProduct[]
  Wishlist           Wishlist[]
}

model ClothProduct {
  id        String  @unique @default(cuid())
  humanType String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model GroceryProduct {
  id         String   @unique @default(cuid())
  expiryDate DateTime
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
}

model AccessoriesProduct {
  id        String  @unique @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Orders {
  id           String         @unique @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  totalPrice   Int
  OrderProduct OrderProduct[]
}

model ProductHistory {
  id        String   @unique @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Reviews {
  id        String  @unique @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  userId    String
  content   String
}

model OrderProduct {
  ordersId  String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Orders  @relation(fields: [ordersId], references: [id], onDelete: Cascade)
  quantity  Int

  @@id([ordersId, productId])
}

model CartProduct {
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  cartId    String
  productId String
  quantity  Int

  @@id([cartId, productId])
}

model Wishlist {
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  productId String
  userId    String

  @@id([productId, userId])
}
