generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String
  staff         Boolean    @default(false)
  email         String     @unique
  createdAt     DateTime   @default(now())
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  Cart          Cart[]
  Orders        Orders[]
  Reviews       Reviews[]
  sessions      Session[]
  Wishlist      Wishlist[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             String           @id @default(cuid())
  name           String
  image          String
  stock          Int
  price          Int
  category       String
  details        String[]
  description    String
  size           String
  createdAt      DateTime         @default(now())
  ClothProduct   ClothProduct[]
  GroceryProduct GroceryProduct[]
  OrderProduct   OrderProduct[]
  ProductHistory ProductHistory[]
  Reviews        Reviews[]
  Wishlist       Wishlist[]
  Cart           Cart[]
}

model ClothProduct {
  humanType String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId])
}

model GroceryProduct {
  expiryDate DateTime
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId])
}

model Orders {
  id           String         @id @default(cuid())
  userId       String
  totalPrice   Int
  OrderProduct OrderProduct[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductHistory {
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId])
}

model Reviews {
  productId String
  userId    String
  content   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([productId, userId])
}

model OrderProduct {
  ordersId  String
  productId String
  quantity  Int
  order     Orders  @relation(fields: [ordersId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([ordersId, productId])
}

model Cart {
  userId    String
  productId String
  quantity  Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
}

model Payment {
  razorpay_payment_id String
  razorpay_order_id   String
  razorpay_signature  String

  @@id([razorpay_order_id, razorpay_signature, razorpay_payment_id])
}

model Wishlist {
  productId String
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([productId, userId])
}
